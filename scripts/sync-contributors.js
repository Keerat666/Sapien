#!/usr/bin/env node
/*
 Auto-generates CONTRIBUTORS.md from ui/src/pages/Contributors.tsx
 - Extracts the `const contributors = [...]` array
 - Parses it (uses JSON5 when available; otherwise uses a safe fallback)
 - Writes a normalized Markdown table
*/

const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const TSX_PATH = path.join(ROOT, 'ui', 'src', 'pages', 'Contributors.tsx');
const MD_PATH = path.join(ROOT, 'CONTRIBUTORS.md');

function readFile(filePath) {
  return fs.readFileSync(filePath, 'utf8');
}

function writeFile(filePath, content) {
  fs.writeFileSync(filePath, content, 'utf8');
}

function extractContributorsArray(tsx) {
  const anchor = 'const contributors';
  const idx = tsx.indexOf(anchor);
  if (idx === -1) {
    throw new Error('Could not find `const contributors` in Contributors.tsx');
  }
  // Find the first '[' after the anchor
  let i = tsx.indexOf('[', idx);
  if (i === -1) throw new Error('Could not find opening [ of contributors array');
  let depth = 0;
  let start = i;
  for (; i < tsx.length; i++) {
    const ch = tsx[i];
    if (ch === '[') depth++;
    else if (ch === ']') {
      depth--;
      if (depth === 0) {
        // Include the closing bracket
        const end = i + 1;
        return tsx.slice(start, end);
      }
    }
  }
  throw new Error('Unbalanced brackets while extracting contributors array');
}

function parseContributors(arrayText) {
  // Prefer JSON5 if available for robust parsing
  try {
    const JSON5 = require('json5');
    return JSON5.parse(arrayText);
  } catch (_) {
    // Fallback: coerce to valid JSON (best-effort for simple objects)
    let s = arrayText.slice();
    // Remove trailing commas before } or ]
    s = s.replace(/,\s*([}\]])/g, '$1');
    // Quote unquoted keys
    s = s.replace(/([{,])\s*(\w+)\s*:/g, '$1 "$2":');
    // Convert single quotes to double quotes
    s = s.replace(/'([^']*)'/g, (m, g1) => '"' + g1.replace(/"/g, '\\"') + '"');
    return JSON.parse(s);
  }
}

function makeMarkdown(contributors) {
  const updated = new Date().toISOString();
  const header = `# Contributors and Maintainers\n\n` +
    `<!-- Auto-generated by scripts/sync-contributors.js at ${updated}. Do not edit manually. -->\n\n` +
    `This project is maintained by the Sapien Team. This list is generated from the UI source (\`ui/src/pages/Contributors.tsx\`).\n\n` +
    `## People\n\n` +
    `| Name | GitHub | Role | Avatar |\n|------|--------|------|--------|\n`;

  const rows = contributors.map(c => {
    const name = c.name || '';
    const github = c.githubId ? `[@${c.githubId}](https://github.com/${c.githubId})` : '';
    const role = c.role || '';
    const avatar = c.avatar ? `<img src="${c.avatar}" alt="${name}" width="48" height="48" />` : '';
    return `| ${name} | ${github} | ${role} | ${avatar} |`;
  }).join('\n');

  const footer = `\n\n## Contact and Support\n\n` +
    `- For bugs, questions, or feature requests, please open an issue in this repository.\n` +
    `- For security-related issues, please do not open a public issue. Instead, create a private, minimal reproduction and contact a maintainer via their GitHub profile.\n\n` +
    `## How to be listed here\n\n` +
    `Make a meaningful contribution (PR merged) and add yourself to the contributor wall per the instructions in \`Conrtibutor.md\`, then submit a PR updating \`ui/src/pages/Contributors.tsx\`.\n`;

  return header + rows + footer + '\n';
}

function main() {
  const tsx = readFile(TSX_PATH);
  const arrText = extractContributorsArray(tsx);
  const contributors = parseContributors(arrText);
  if (!Array.isArray(contributors)) {
    throw new Error('Parsed contributors is not an array');
  }
  const md = makeMarkdown(contributors);
  writeFile(MD_PATH, md);
  console.log(`Updated ${path.relative(ROOT, MD_PATH)} with ${contributors.length} contributor(s).`);
}

if (require.main === module) {
  try {
    main();
  } catch (err) {
    console.error('[sync-contributors] Failed:', err.message);
    process.exit(1);
  }
}
